import os
import subprocess
import sys
import webbrowser
from dotenv import load_dotenv
import time
import threading


# Carregar vari√°veis de ambiente
load_dotenv()

def verificar_estrutura_pastas():
    """Verifica e cria a estrutura de pastas necess√°ria para a aplica√ß√£o."""
    import os
    
    # Caminhos importantes
    base_dir = os.path.dirname(os.path.abspath(__file__))
    app_dir = os.path.join(base_dir, "app")
    static_dir = os.path.join(app_dir, "static")
    templates_dir = os.path.join(app_dir, "templates")
    
    # Verificar e criar diret√≥rio de templates se necess√°rio
    if not os.path.exists(templates_dir):
        print(f"Criando diret√≥rio de templates em {templates_dir}")
        os.makedirs(templates_dir, exist_ok=True)
    
    # Verificar e criar diret√≥rio static se necess√°rio
    if not os.path.exists(static_dir):
        print(f"Criando diret√≥rio de arquivos est√°ticos em {static_dir}")
        os.makedirs(static_dir, exist_ok=True)
    
    print("‚úÖ Estrutura de diret√≥rios verificada com sucesso!")

def iniciar_aplicacao():
    print("\n===== INICIANDO APLICA√á√ÉO MULTASGO =====")
    
    # Verificar estrutura de pastas
    verificar_estrutura_pastas()
    
    # Verificar conex√£o com o banco de dados primeiro
    print("Verificando conex√£o com o banco de dados...")
    try:
        # Importar o m√≥dulo de teste de conex√£o
        import testar_conexao
        if not testar_conexao.testar_conexao():
            print("\n‚ùå N√£o foi poss√≠vel estabelecer conex√£o com o banco de dados.")
            print("Verifique as configura√ß√µes no arquivo .env e tente novamente.")
            return
    except ImportError:
        print("Aviso: M√≥dulo de teste de conex√£o n√£o encontrado. Pulando verifica√ß√£o.")
    
    # Configurar vari√°veis de ambiente
    os.environ["PORT"] = "8080"
    
    #desativa o autocomplete
    """
    # Inicializar e treinar o SymSpell com dados do banco
    try:
        print("Inicializando sistema de corre√ß√£o ortogr√°fica e autocompletar...")
        # Inicializamos em um novo thread para n√£o bloquear a inicializa√ß√£o
        import threading
        from app.db.database import get_db
        from app.services.search_service import treinar_symspell_com_banco, autocomplete_index
        
        def inicializar_servicos_pesquisa():
            try:
                print("Carregando dicion√°rio de termos e sugest√µes...")
                db = next(get_db())
                # Treinar SymSpell com dados do banco
                treinar_symspell_com_banco(db)
                # Atualizar √≠ndice de autocompletar
                autocomplete_index.update_from_database(db)
                print("‚úÖ Sistema de pesquisa inicializado com sucesso!")
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso: Inicializa√ß√£o do sistema de pesquisa encontrou um erro: {e}")
                print("A aplica√ß√£o continuar√° funcionando, mas algumas sugest√µes podem n√£o estar dispon√≠veis.")
        
        # Iniciar em um thread separado para n√£o bloquear o inicializa√ß√£o
        inicializar_thread = threading.Thread(target=inicializar_servicos_pesquisa)
        inicializar_thread.daemon = True
        inicializar_thread.start()
    except Exception as e:
        print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel inicializar o sistema de pesquisa: {e}")
        print("A aplica√ß√£o continuar√° funcionando com recursos de pesquisa limitados.")
    """
    
    
    print("\nüöÄ Iniciando o servidor MultasGO...")
    print("URL: http://localhost:8080")
    print("Pressione CTRL+C para encerrar o servidor.")
    
    # Timer para abrir o navegador ap√≥s 2 segundos
    def abrir_navegador():
        time.sleep(2)
        webbrowser.open("http://localhost:8080")
    
    # Iniciar o thread para abrir o navegador
    thread = threading.Thread(target=abrir_navegador)
    thread.daemon = True
    thread.start()
    
    # Iniciar o servidor
    try:
        subprocess.run([sys.executable, "-m", "app.main"], check=True)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Servidor encerrado pelo usu√°rio.")
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Erro ao iniciar o servidor: {e}")
        print("Verifique os logs para mais detalhes.")

if __name__ == "__main__":
    iniciar_aplicacao()